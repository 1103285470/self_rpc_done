package com.sdp.self_rpc_done.serviceProviderFib;import com.sdp.self_rpc_done.protoEntity.request;import com.sdp.self_rpc_done.publicInterface.*;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import java.util.concurrent.*;import java.util.concurrent.atomic.AtomicInteger;/*************************************************** * Copyright (C) didi_global                       * FileName:         serverHandler                       * Author:           Sun Dongpo                    * Date:             2020/4/4 下午12:08               * Description:      服务器端的请求处理器                * Tele:             15029155474                   * mail:             sundongpo_i@didiglobal.com    ************************************************** */public class FibServerHandler extends ChannelInboundHandlerAdapter{    private ThreadPoolExecutor threadPool;    private ChannelHandlerContext ctx;    //初始化当前实例的时候初始化线程池    public FibServerHandler(int workThread) {        //创建阻塞队列        BlockingQueue<Runnable> blockingQueue = new ArrayBlockingQueue<>(100);        //自定义线程创建工厂        ThreadFactory threadFactory = new ThreadFactory() {            AtomicInteger count = new AtomicInteger(0);            @Override            public Thread newThread(Runnable r) {                Thread t = new Thread(r);                t.setName("rpc_"+count.getAndIncrement());                return t;            }        };        threadPool = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(),                workThread,10, TimeUnit.SECONDS,blockingQueue,threadFactory);    }    //比较优雅的关闭线程池    public void closeGracefully(){        threadPool.shutdown();        try {            threadPool.awaitTermination(10,TimeUnit.SECONDS);        } catch (InterruptedException e) {            e.printStackTrace();        }        threadPool.shutdownNow();    }    @Override    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {        //对输入的数据进行强制类型转换        request.RequestBody msgInput = (request.RequestBody) msg;        System.out.println("[Fib]  "+msgInput.toString()+"...");        //返回给客户端的消息        handlerMessage(msgInput);    }    //消息处理器    public void handlerMessage(request.RequestBody messageInput){       /* //检查注册中心中是否存在改服务的解决方案        Class<?> clazz = MessageRegistry.get(messageInput.getType());        //如果不存在该服务的解决方案，我们就使用默认的处理器返回一个500错误        if(clazz == null){            MessageHandlers.defaultHandler.handle(ctx,messageInput.getRequestId(),messageInput);            return;        }*/        //通过注册的入参数类型对请求体进行解析        request.SelfReq payload = messageInput.getReq();        new FibRequestHandler().handle(ctx,messageInput.getType(),payload);    }    @Override    public void channelActive(ChannelHandlerContext ctx) throws Exception {        this.ctx = ctx;    }    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        cause.printStackTrace();        ctx.channel().close();        this.closeGracefully();    }}