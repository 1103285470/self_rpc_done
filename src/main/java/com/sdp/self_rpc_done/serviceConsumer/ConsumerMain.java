package com.sdp.self_rpc_done.serviceConsumer;import com.sdp.self_rpc_done.protoEntity.request;import com.sdp.self_rpc_done.publicInterface.*;import com.sdp.self_rpc_done.zkRegistryAndDiscover.ServiceAttr;import com.sdp.self_rpc_done.zkRegistryAndDiscover.ZkDiscover;import io.netty.bootstrap.Bootstrap;import io.netty.channel.*;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioSocketChannel;import org.apache.zookeeper.KeeperException;import java.io.IOException;import java.util.List;/*************************************************** * Copyright (C) didi_global                       * FileName:         ConsumerMain                       * Author:           Sun Dongpo                    * Date:             2020/4/4 下午12:13               * Description:      服务消费方构建                * Tele:             15029155474                   * mail:             sundongpo_i@didiglobal.com    ************************************************** */public class ConsumerMain {    private static List<ServiceAttr> discover;    private String host;    private Integer port;    private EventLoopGroup workGroup;    private String whichService;    static {        Thread thread = new Thread(() -> {            try {                ZkDiscover.Discover();                System.out.println("running");            } catch (IOException e) {                e.printStackTrace();            } catch (KeeperException e) {                e.printStackTrace();            } catch (InterruptedException e) {                e.printStackTrace();            }        });        thread.setDaemon(true);        thread.start();    }    public ConsumerMain(String whichService) {        this.workGroup = new NioEventLoopGroup();        this.whichService = whichService;    }    public static void setDiscover(List<ServiceAttr> discover) {        ConsumerMain.discover = discover;        System.out.println("discover:"+discover);    }    public void starter() throws InterruptedException, IOException, KeeperException {        if(discover == null){            Thread.sleep(2000);            if(discover == null){                System.err.println("无服务...");                return;            }        }        ServiceAttr serviceAttr = judge(whichService);        host = serviceAttr.getServiceHost();        port = serviceAttr.getPort();        try {            Bootstrap Clisbs = new Bootstrap();            Clisbs.group(workGroup)                    .channel(NioSocketChannel.class)                    .option(ChannelOption.SO_KEEPALIVE,true)                    .handler(new ChannelInitializer<SocketChannel>() {                        @Override                        protected void initChannel(SocketChannel socketChannel) throws Exception {                            ChannelPipeline pipeline = socketChannel.pipeline();                            pipeline.addLast(new DecodeBa_2());                            pipeline.addLast(new EncodeBa());                            pipeline.addLast(new ClientHandler());                        }                    });            ChannelFuture channelFuture= Clisbs.connect(host, port).sync();            Channel channel = channelFuture.channel();            for(int i = 0 ; i < 5 ; i++){                channel.writeAndFlush(buildMessageOutPut(i));                Thread.sleep(100);            }            channel.closeFuture().sync();        }finally {            workGroup.shutdownGracefully();        }    }    private request.RequestBody buildMessageOutPut(int i){        request.SelfReq.Builder builderSelfReq = request.SelfReq.newBuilder();        builderSelfReq.setExp(10);        builderSelfReq.setBase(2);        request.SelfReq build = builderSelfReq.build();        request.RequestBody.Builder builderBody = request.RequestBody.newBuilder();        builderBody.setRequestId("self_req_"+whichService+i);        builderBody.setType(whichService);        builderBody.setReq(build);        return builderBody.build();    }    private ServiceAttr judge(String serviceName) {        for (int i = 0 ; i < discover.size() ; i++){            if(discover.get(i).getServiceName().equals(serviceName))                return discover.get(i);        }        return null;    }}