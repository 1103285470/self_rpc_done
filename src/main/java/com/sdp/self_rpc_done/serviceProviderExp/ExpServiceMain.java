package com.sdp.self_rpc_done.serviceProviderExp;import com.sdp.self_rpc_done.apolloJoinUp.Registe_service;import com.sdp.self_rpc_done.publicInterface.DecodeBa;import com.sdp.self_rpc_done.publicInterface.DecodeBa_2;import com.sdp.self_rpc_done.publicInterface.EncodeBa;import com.sdp.self_rpc_done.publicInterface.EncodeBa_2;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.*;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;/*************************************************** * Copyright (C) didi_global * FileName:         ServiceMain * Author:           Sun Dongpo * Date:             2020/4/4 下午12:13 * Description:      服务提供方构建 * Tele:             15029155474 * mail:             sundongpo_i@didiglobal.com ************************************************** */public class ExpServiceMain {    private String host;    private Integer port;    private String serviceName;    private EventLoopGroup bossGroup;    private EventLoopGroup workGroup;    public ExpServiceMain(Registe_service registe_service) {        this.port = registe_service.getPort();        this.host = registe_service.getHost();        this.serviceName = registe_service.getServiceName();        this.bossGroup = new NioEventLoopGroup();        this.workGroup = new NioEventLoopGroup();    }    public void starter() throws InterruptedException {        try {            ServerBootstrap Expsbs = new ServerBootstrap();            Expsbs.group(bossGroup,workGroup)                    .channel(NioServerSocketChannel.class)                    .childOption(ChannelOption.SO_BACKLOG,128)                    .childOption(ChannelOption.SO_KEEPALIVE, true)// 长时间                    .childHandler(new ChannelInitializer<SocketChannel>() {                        @Override                        protected void initChannel(SocketChannel socketChannel) throws Exception {                            ChannelPipeline pipeline = socketChannel.pipeline();                            pipeline.addLast(new DecodeBa());                            pipeline.addLast(new EncodeBa_2());                            //TODO                            pipeline.addLast(new ExpServerHandler(10));                        }                    });            ChannelFuture channelFuture= Expsbs.bind(host, port).sync();            System.err.println(serviceName+"服务启动...");            channelFuture.channel().closeFuture().sync();        }finally {            bossGroup.shutdownGracefully();            workGroup.shutdownGracefully();        }    }}