package com.sdp.self_rpc_done.zkRegistryAndDiscover;/*************************************************** * Copyright (C) didi_global                       * FileName:         ZkDiscover                       * Author:           Sun Dongpo                    * Date:             2020/5/2 4:53 PM               * Description:                      * Tele:             15029155474                   * mail:             sundongpo_i@didiglobal.com    ************************************************** */import com.alibaba.fastjson.JSON;import com.sdp.self_rpc_done.apolloJoinUp.ApUtil;import com.sdp.self_rpc_done.apolloJoinUp.ZkConnect;import com.sdp.self_rpc_done.baseNetty.ConsumerStarter;import com.sdp.self_rpc_done.serviceConsumer.ConsumerMain;import io.netty.util.CharsetUtil;import org.apache.zookeeper.KeeperException;import org.apache.zookeeper.WatchedEvent;import org.apache.zookeeper.Watcher;import org.apache.zookeeper.ZooKeeper;import sun.rmi.runtime.Log;import java.io.IOException;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Set;import static io.netty.util.CharsetUtil.*;/** * 服务发现，读取zookeeper中的服务注册信息列表。选取自己想要调用的服务发起调用 */public class ZkDiscover {    private ZooKeeper zk;    private ZkConnect zkConnect = ApUtil.zkConnect();    public static ZkDiscover Discover() throws IOException, KeeperException, InterruptedException {        ZkDiscover zkDiscover = new ZkDiscover();        zkDiscover.getConnect();        zkDiscover.doDiscover();        zkDiscover.durableWorking();        return zkDiscover;    }    private  void durableWorking() throws InterruptedException {       //TODO       Thread.sleep(Long.MAX_VALUE);    }    private  void doDiscover() throws KeeperException, InterruptedException {        List<String> children = zk.getChildren(zkConnect.getServiceFindPath_find(), true);        List<ServiceAttr> services = new ArrayList<>();        children.forEach(service->{            try {                byte[] data = zk.getData(zkConnect.getServiceFindPath_find() +"/"+ service, false, null);                ServiceAttr serviceAttr = JSON.parseObject(new String(data, CharsetUtil.UTF_8), ServiceAttr.class);                services.add(serviceAttr);            } catch (KeeperException e) {                e.printStackTrace();            } catch (InterruptedException e) {                e.printStackTrace();            }        });        ConsumerMain.setDiscover(services);    }    private  void getConnect() throws IOException {        zk = new ZooKeeper(zkConnect.getConnectString_find(), zkConnect.getSessionTimeOut_find(), new Watcher() {            public void process(WatchedEvent event) {                try {                    doDiscover();                } catch (KeeperException e) {                    e.printStackTrace();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        });    }}